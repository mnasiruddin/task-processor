package com.coolplanet.task.domain.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.Id;
import org.springframework.data.relational.core.mapping.Column;
import org.springframework.data.relational.core.mapping.Table;

/**
 * Entity class representing a task, used to persist and retrieve task data
 * from a relational database table named "task".
 * This class is annotated with Lombok and Spring Data R2DBC annotations for
 * boilerplate code minimization and database mapping configuration.
 *
 * Annotations:
 * - {@code @Data}: Automatically generates standard methods such as getters, setters,
 *   equals, hashCode, and toString.
 * - {@code @NoArgsConstructor}: Generates a no-argument constructor.
 * - {@code @AllArgsConstructor}: Generates a constructor with arguments for all fields.
 * - {@code @Table("task")}: Specifies the database table mapped to this entity.
 *
 * Fields:
 * - {@code id}: Represents the primary database-generated value for uniquely identifying an entity.
 * - {@code taskId}: Serves as the business identifier of the task entity, designated as the primary key.
 * - {@code totalDurationMs}: Tracks the total task duration in milliseconds.
 * - {@code counter}: Records the number of aggregated entries for the task.
 *
 * Constructors:
 * - A no-argument constructor.
 * - A parameterized constructor initializing {@code taskId} and {@code totalDurationMs},
 *   with {@code counter} defaulting to 0.
 * - A parameterized constructor initializing {@code taskId}, {@code totalDurationMs}, and
 *   {@code counter}.
 * - A parameterized constructor initializing only {@code taskId}, with remaining fields defaulted.
 *
 * Methods:
 * - {@code addToTotalDuration(long duration)}: Adds the specified duration to the current total duration.
 * - {@code setCounter(Long counter)}: Updates the counter value.
 * - {@code average()}: Calculates and returns the average duration by dividing the total duration
 *   by the counter, or returns 0 if the counter is 0.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Table("task")
public class TaskEntity {

    @Column("id")
    private String id; // Auto-generated by DB

    @Id
    @Column("task_id")
    private String taskId;

    @Column("total_duration_ms")
    private Long totalDurationMs;

    @Column("counter")
    private Long counter;

    public TaskEntity(String taskId, long totalDurationMs) {
        this.taskId = taskId;
        this.totalDurationMs = totalDurationMs;
        this.counter = 0L;
    }

    public TaskEntity(String taskId, long totalDurationMs, long counter) {
        this.taskId = taskId;
        this.totalDurationMs = totalDurationMs;
        this.counter = counter;
    }

    public TaskEntity(String taskId) {
        this.taskId = taskId;
        this.totalDurationMs = 0L;
        this.counter = 0L;
    }

    public double average() {
        return counter == 0 ? 0 : (double) totalDurationMs / counter;
    }

}
